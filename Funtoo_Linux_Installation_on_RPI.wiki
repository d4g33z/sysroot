= Install Funtoo Linux on a Raspberry Pi =

== Introduction ==
This is the updated quick and dirty HOWTO covering the automation of cross-compiling, kernel building, emulation and booting of arbitrary architectures, but specifically focused on the cross compiling the Raspeberry Pi linux kernel sources for target arm-linux-gnueabihf and booting it on Raspberry Pi boards with a funtoo stage 3. It's so quick and dirty you probably won't be able replicate the results here on your first try. But it is possible!

This is an update of [[Crossdev_Automation]], reflecting the changes needed to accomodate the new kits structure of Funtoo, and to clean up the scripting used for automation. The document will remain available for reference purposes.

== Installation Overview ==
#[[Create Your Installation Settings]]
#[[Install the Stage 3 Tarball]]
#[[Install the Firmware]]
#[[Configure Your System]]
#[[Install Binary Kernel, Modules, and dtbs or Cross-Compile from Source]]
#[[Optionally Install Distcc via QEMU Chroot]]
#[[Partition and Format an SDCard]]
#[[Deploy Installation to SDCard]]

== Get the Bash Script ==

Development code is available on [https://github.com/d4g33z/sysroot.git github]. The structure of the file {{c|sysroot.sh}} should roughly correspond to the information contained here.

== Follow the Installation Steps ==

=== Create Your Installation Settings ===

Confguration your installation. These variables are referencecd by the {{c|sysroot.sh}} script and by this document.

{{file|name=config.sh|lang=bash|desc=Set your install configuration variables|body=
KERNEL_WORK=/usr/src/rpi_kernel
RPI_KERN_BRANCH=rpi-4.14.y

SYSROOT_WORK=/usr/src/sysroots
STAGE_URL="http://ftp.osuosl.org/pub/funtoo/funtoo-current/arm-32bit/raspi3/stage3-latest.tar.xz"
CHOST=armv7a-hardfloat-linux-gnueabi
CFLAGS="-O2 -pipe -march=armv7-a -mtune=cortex-a53 -mfpu=neon-vfpv4 -mfloat-abi=hard"

#SDCARD_DEV=mmcblk0p
SDCARD_DEV=sdb

#optional
DISTCC_REMOTE_JOBS=21
DISTCC_REMOTE_HOSTS="10.0.0.1,cpp,lzo"
}}



=== Install the Stage 3 Tarball ===

Download the current Funtoo stage 3 build appropriate for your Raspberry Pi device. Check the [[Subarches#arm32]] page, to see the version available for versions 1,2 and 3 of the Pi. Here we download the version for version 3 by setting the STAGE_URL variable in our configuration file. 

We need to save the archive to {{c|STAGE#_ARCHIVE=/tmp/stage3-latest.tar.xz}} and unpack it to {{c|$SYSWORK=$SYSROOT_WORK/$CHOST}}. Back up or remove any previous work in that local.

{{console|body=
###i## mv -n $SYSROOT $SYSROOT.old
###i## mkdir -p $SYSROOT
###i## wget ${STAGE_URL} -O ${STAGE3_ARCHIVE}
###i## tar xpfv ${STAGE3_ARCHIVE} -C ${SYSROOT}
}}

=== Install the Firmware ===
Make your work directory and clone the official firmware repo into it. Copy the appropriate boot firmware files to the sysroot, along with the video acceleration binaries. If you want to use the wireless networking function, you need the bcrm firmware as well.

{{console|body=
###i## mkdir -p ${KERNEL_WORK}
###i## git clone --depth 1 git://github.com/raspberrypi/firmware/ ${KERNEL_WORK}/firmware
###i## cp ${KERNEL_WORK}/firmware/boot/{bootcode.bin,fixup*.dat,start*.elf} ${SYSROOT}/boot
###i## cp -r ${KERNEL_WORK}/firmware/hardfp/opt ${SYSROOT}
###i## git clone --depth 1 https://github.com/RPi-Distro/firmware-nonfree ${KERNEL_WORK}/firmware-nonfree
###i## git --git-dir=${KERNEL_WORK}/firmware-nonfree/.git --work-tree=${KERNEL_WORK}/firmware-nonfree pull origin
###i## mkdir -p ${SYSROOT}/lib/firmware/brcm
###i## cp -r ${KERNEL_WORK}/firmware-nonfree/brcm/brcmfmac43430-sdio.{bin,txt} ${SYSROOT}/lib/firmware/brcm
}}

=== Configure Your System ===
=== Install Binary Kernel, Modules, and dtbs or Cross-Compile from Source ===
==== Retrieving Necessary Source Trees ====
==== Using a Local Overlay with Crossdev ====
{{Package|sys-devel/crossdev}} is a wonderful script for managing cross-compiling environments on Gentoo, but it is incompatible with Funtoo's improved gcc ebuilds. There is incomplete documentation of a pure Funtoo [https://bugs.funtoo.org/browse/FL-3787 solution], but there has been no follow up on a complete implementation.

A simple solution is to create a [[Local_Overlay|local overlay]] named "crossdev", store gentoo ebuilds and patches in it, and use a crossdev command line switch to direct it to search the overlay for the appropriate ebuilds. This has the advantage of isolating all gentoo files and resulting binaries in a single directory.~

Let's follow the directions from [[Local_Overlay]], and remove the .git subdirectory.~
{{console|body=
###i## mkdir /var/git/overlay
###i## cd /var/git/overlay
###i## git clone  https://github.com/funtoo/skeleton-overlay.git crossdev
###i## rm -rf /var/git/overlay/crossdev/.git
###i## echo "crossdev" > /var/git/overlay/crossdev/profiles/repo_name
}}

Edit config files to match.
{{file|name=/etc/portage/repos.conf/crossdev.conf|lang=|desc=Add the crossdev overlay to portage|body=
[crossdev]
location = /var/git/overlay/crossdev
auto-sync = no
priority = 10
}}

Let's make a [https://stackoverflow.com/questions/600079/how-do-i-clone-a-subdirectory-only-of-a-git-repository/28039894#28039894 sparse checkout] of the main Gentoo repo.

{{console|body=
###i## cd /var/git/overlay/crossdev
###i## git init
###i## git remote add origin git://github.com/gentoo/gentoo.git
###i## git config core.sparseCheckout true
###i## echo "sys-devel/gcc" >> .git/info/sparse-checkout
###i## git pull --depth=1 origin master
}}

Install crossdev.
{{console|body=
# echo "sys-devel/crossdev **" >> /etc/portage/package.keywords/crossdev
# echo "=sys-devel/crossdev-99999999" >> /etc/portage/package.unmask/crossdev
# emerge crossdev
}}


=== Optionally Install Distcc via QEMU Chroot ===
=== Partition and Format an SDCard ===
=== Deploy Installation to SDCard ===

